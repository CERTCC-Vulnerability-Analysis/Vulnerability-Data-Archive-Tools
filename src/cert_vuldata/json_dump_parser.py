'''
Created on Feb 15, 2016

@author: adh
'''
import re
import os
import json
from dateutil import parser
import errno
from pprint import pprint

def get_vu_path(vuid):
    _head, tail = vuid.split('#')
    vu_num = int(tail)

    dir_str = str(vu_num % 100)

    vu_dir = vuid.replace('#', '_')

    return os.path.join(dir_str, vu_dir)


def mkdir_p(path):
    '''
    If directory exists, just return True
    Otherwise create it and return False
    :param path:
    '''
    try:
        os.makedirs(path)
    except OSError as exc:
        # if the dir already exists, just move along
        if exc.errno == errno.EEXIST:
            return True
        else:
            raise
    return False

def cleanup(content):
    # notes does some funky escaping that is unnecessary
    return content.replace('\!', '!').replace('\>', '>').replace(chr(28), 'fi')

def read_data_from_file(f):
    print('### reading {} ###'.format(f))
    with open(f, 'rb') as fp:
        bindata = fp.read().decode('utf-8')
        data = json.loads(cleanup(bindata))

    return data

def process_dir(d):
    file_list = (x for x in os.listdir(d) if x.endswith('.json'))
    # only the ones with dashes in them
    file_list = (x for x in file_list if '-' in x)

    for f in file_list:
        path = os.path.join(d, f)
        data = read_data_from_file(path)
        yield(data)

def process_raw_data(data):
    entry_list = data['viewentry']

    for entry in entry_list:
        yield(process_raw_entry(entry))

def process_raw_entry(entry):
    entry_data_list = entry['entrydata']
    elements = []
    for element in entry_data_list:
        processed_element = process_raw_element(element)
        elements.append(processed_element)

    return dict(elements)

def process_raw_element(element):
    element_name = element['@name']

    # is it text?
    raw_value = element.get('text')
    if raw_value is not None:
        return(element_name, raw_value['0'])

    # is it datetime?
    raw_value = element.get('datetime')
    if raw_value is not None:
        ln_datestr = raw_value['0']

        rfc_datestr = re.sub(',\d\d', '', ln_datestr)
        if '-' in rfc_datestr:
            rfc_datestr = rfc_datestr + '00'

        try:
            datestr = parser.parse(rfc_datestr).isoformat('T')
        except ValueError as e:
            print("Unable to parse: '{}'".format(rfc_datestr))
            raise e

        return(element_name, datestr)

    # is it datetimelist?
    raw_value = element.get('datetimelist')
    if raw_value is not None:
        rv = raw_value['datetime']
        values = [x['0'] for x in rv]

        # we only care about the first one anyway
        ln_datestr = list(set(values))[0]

        rfc_datestr = re.sub(',\d\d', '', ln_datestr)
        if '-' in rfc_datestr:
            rfc_datestr = rfc_datestr + '00'

        try:
            datestr = parser.parse(rfc_datestr).isoformat('T')
        except ValueError as e:
            print("Unable to parse: '{}'".format(rfc_datestr))
            raise e

        return(element_name, datestr)

    # is it number?
    raw_value = element.get('number')
    if raw_value is not None:
        # catch floats first
        if '.' in raw_value['0']:
            return (element_name, float(raw_value['0']))
        # if you got here, it must be an int
        return(element_name, int(raw_value['0']))


    raw_value = element.get('textlist')
    if raw_value is not None:
        rv = raw_value['text']
        values = [x['0'] for x in rv]
        return(element_name, values)

    # neither?
    print('Unrecognized record')
    pprint(element)
    raise(BaseException)

def dump_record(data, get_outfile, outpath):
    vuid = data['ID']

    if "#" not in vuid:
        print("SKIPPING:", vuid)
        pprint(data)
        return

    vupath = get_vu_path(vuid)

    outdir = os.path.join(outpath, vupath).lower()
    outfile = os.path.join(outdir, get_outfile(data)).lower()

    if not os.path.isdir(outdir):
        mkdir_p(outdir)

    with open(outfile, 'w') as f:
        json.dump(data, f, indent=2, sort_keys=True)

    print(outfile)

def get_vul_outfile(data):
    vuid = data['ID']
    fname_fmt = '{}.json'
    return fname_fmt.format(vuid.replace('#', '_'))

def get_vendor_outfile(data):
    vrid = data['VendorRecordID']
    fname_fmt = 'vendor_{}.json'
    return fname_fmt.format(vrid).lower()
